// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package auth

import (
	"sync"
)

// Ensure, that DataStoreMock does implement DataStore.
// If this is not the case, regenerate this file with moq.
var _ DataStore = &DataStoreMock{}

// DataStoreMock is a mock implementation of DataStore.
//
// 	func TestSomethingThatUsesDataStore(t *testing.T) {
//
// 		// make and configure a mocked DataStore
// 		mockedDataStore := &DataStoreMock{
// 			createAccountFunc: func(account *Account) error {
// 				panic("mock out the createAccount method")
// 			},
// 			getAccountFunc: func(username string) *Account {
// 				panic("mock out the getAccount method")
// 			},
// 			updateAccountFunc: func(account *Account) (*Account, error) {
// 				panic("mock out the updateAccount method")
// 			},
// 		}
//
// 		// use mockedDataStore in code that requires DataStore
// 		// and then make assertions.
//
// 	}
type DataStoreMock struct {
	// createAccountFunc mocks the createAccount method.
	createAccountFunc func(account *Account) error

	// getAccountFunc mocks the getAccount method.
	getAccountFunc func(username string) *Account

	// updateAccountFunc mocks the updateAccount method.
	updateAccountFunc func(account *Account) (*Account, error)

	// calls tracks calls to the methods.
	calls struct {
		// createAccount holds details about calls to the createAccount method.
		createAccount []struct {
			// Account is the account argument value.
			Account *Account
		}
		// getAccount holds details about calls to the getAccount method.
		getAccount []struct {
			// Username is the username argument value.
			Username string
		}
		// updateAccount holds details about calls to the updateAccount method.
		updateAccount []struct {
			// Account is the account argument value.
			Account *Account
		}
	}
	lockcreateAccount sync.RWMutex
	lockgetAccount    sync.RWMutex
	lockupdateAccount sync.RWMutex
}

// createAccount calls createAccountFunc.
func (mock *DataStoreMock) createAccount(account *Account) error {
	if mock.createAccountFunc == nil {
		panic("DataStoreMock.createAccountFunc: method is nil but DataStore.createAccount was just called")
	}
	callInfo := struct {
		Account *Account
	}{
		Account: account,
	}
	mock.lockcreateAccount.Lock()
	mock.calls.createAccount = append(mock.calls.createAccount, callInfo)
	mock.lockcreateAccount.Unlock()
	return mock.createAccountFunc(account)
}

// createAccountCalls gets all the calls that were made to createAccount.
// Check the length with:
//     len(mockedDataStore.createAccountCalls())
func (mock *DataStoreMock) createAccountCalls() []struct {
	Account *Account
} {
	var calls []struct {
		Account *Account
	}
	mock.lockcreateAccount.RLock()
	calls = mock.calls.createAccount
	mock.lockcreateAccount.RUnlock()
	return calls
}

// getAccount calls getAccountFunc.
func (mock *DataStoreMock) getAccount(username string) *Account {
	if mock.getAccountFunc == nil {
		panic("DataStoreMock.getAccountFunc: method is nil but DataStore.getAccount was just called")
	}
	callInfo := struct {
		Username string
	}{
		Username: username,
	}
	mock.lockgetAccount.Lock()
	mock.calls.getAccount = append(mock.calls.getAccount, callInfo)
	mock.lockgetAccount.Unlock()
	return mock.getAccountFunc(username)
}

// getAccountCalls gets all the calls that were made to getAccount.
// Check the length with:
//     len(mockedDataStore.getAccountCalls())
func (mock *DataStoreMock) getAccountCalls() []struct {
	Username string
} {
	var calls []struct {
		Username string
	}
	mock.lockgetAccount.RLock()
	calls = mock.calls.getAccount
	mock.lockgetAccount.RUnlock()
	return calls
}

// updateAccount calls updateAccountFunc.
func (mock *DataStoreMock) updateAccount(account *Account) (*Account, error) {
	if mock.updateAccountFunc == nil {
		panic("DataStoreMock.updateAccountFunc: method is nil but DataStore.updateAccount was just called")
	}
	callInfo := struct {
		Account *Account
	}{
		Account: account,
	}
	mock.lockupdateAccount.Lock()
	mock.calls.updateAccount = append(mock.calls.updateAccount, callInfo)
	mock.lockupdateAccount.Unlock()
	return mock.updateAccountFunc(account)
}

// updateAccountCalls gets all the calls that were made to updateAccount.
// Check the length with:
//     len(mockedDataStore.updateAccountCalls())
func (mock *DataStoreMock) updateAccountCalls() []struct {
	Account *Account
} {
	var calls []struct {
		Account *Account
	}
	mock.lockupdateAccount.RLock()
	calls = mock.calls.updateAccount
	mock.lockupdateAccount.RUnlock()
	return calls
}
